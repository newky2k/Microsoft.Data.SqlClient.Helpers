<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Data.SqlClient.Helpers</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Data.SqlClient.Helpers.DataConnection">
            <summary>
            DataConnection class using SqlConnection
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Microsoft.Data.SqlClient.Helpers.DataConnection.mConnString">
            <summary>
            The m connection string
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.Helpers.DataConnection.connnection">
            <summary>
            The connnection
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.Helpers.DataConnection.GlobalTimeoutOverride">
            <summary>
            Gets or sets the global timeout override.
            </summary>
            <value>The global timeout override.</value>
        </member>
        <member name="P:Microsoft.Data.SqlClient.Helpers.DataConnection.LocalTimeoutOverride">
            <summary>
            Gets or sets the local timeout for the current instance
            </summary>
            <value>The local timeout override.</value>
        </member>
        <member name="P:Microsoft.Data.SqlClient.Helpers.DataConnection.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Microsoft.Data.SqlClient.Helpers.DataConnection.Connection">
            <summary>
            Gets the SqlConnection object for this instance of DataConnection or its sub-class
            </summary>
            <value>The connection.</value>
            <exception cref="T:System.Exception">You must specify a connection string</exception>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.Helpers.DataConnection" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.Helpers.DataConnection" /> class.
            </summary>
            <param name="connectionString">The connection string to use</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.SqlClient.Helpers.DataConnection"/> class.
            </summary>
            <param name="connectionString">The connection string to use</param>
            <param name="localTimeoutOverride">The timeout to set on this connection</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.GetTimeOut(System.Int32)">
            <summary>
            Gets the applicable time out.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.BeginTransaction">
            <summary>
            Starts a database transaction
            </summary>
            <returns>System.Data.SqlClient.SqlTransaction.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.DoesTableViewExist(System.String)">
            <summary>
            Check to see if the table or view exists
            </summary>
            <param name="tableViewName">Name of the table or view.</param>
            <returns><c>true</c> if exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.Execute(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Executes the database script
            </summary>
            <param name="sSql">The database script to execute</param>
            <param name="pars">The parameters</param>
            <param name="commandType">Type of the command</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <param name="sSql">The database script to execute</param>
            <param name="pars">The parameters</param>
            <param name="commandType">Type of the command</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.ExecuteAsync(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Executes the database script as an asynchronous operation.
            </summary>
            <param name="sSql">The database script to execute</param>
            <param name="pars">The parameters</param>
            <param name="commandType">Type of the command</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.ExecuteScalarAsync(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Executes the query as an asynchronous operation and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. 
            </summary>
            <param name="sSql">The database script to execute</param>
            <param name="pars">The parameters</param>
            <param name="commandType">Type of the command</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
            <returns>Task&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.ExecuteInsertAsync(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Executes an insert as an asynchronous operation and returns the first column of the first row as an int
            </summary>
            <param name="sSql">The database script to execute</param>
            <param name="pars">The parameters</param>
            <param name="commandType">Type of the command</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.Query(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            Runs the specified database script and returns a DataTable with the results
            </summary>
            <param name="sSql">The database script to execute</param>
            <param name="pars">The parameters</param>
            <param name="commandType">Type of the command</param>
            <param name="timeout">The timeout</param>
            <returns>DataTable.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.QueryAsync(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            Runs the specified database script as an asynchronous operation and returns a DataTable with the results
            </summary>
            <param name="sSql">The database script to execute</param>
            <param name="pars">The parameters</param>
            <param name="commandType">Type of the command</param>
            <param name="timeout">The timeout</param>
            <returns>Task&lt;DataTable&gt;.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.ExistsAsync(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Checks to see if the record already exists as an asynchronous operation
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="columnName">Name of the column to compare</param>
            <param name="value">The value to compare</param>
            <param name="timeout">The timeout</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.ExistsAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            Checks to see if the record already exists as an asynchronous operation
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="columnName">Name of the column</param>
            <param name="whereParams">The where parameter dictionary, string = ColumnName, object = value</param>
            <param name="timeout">The timeout</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.QueryDataSetAsync(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.Data.CommandType,System.Int32)">
            <summary>
            Runs the specified database script as an asynchronous operation and returns the whole DataSet
            </summary>
            <param name="sSql">The SQL to execute</param>
            <param name="pars">The parameters</param>
            <param name="commandType">Type of the command</param>
            <param name="timeout">The timeout</param>
            <returns>Task&lt;DataSet&gt;.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.GetDataTableSchemaFromTable(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Gets the DataTable schema from table.
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="transaction">Optional transaction</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.InsertOneAsync(System.String,System.String,System.Object,System.String,System.Object,System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts one data item as an asynchronous operation, without needing database script 
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="idColumnName">The identifier column name</param>
            <param name="idValue">The identifier value name</param>
            <param name="valueColumnName">The value column name</param>
            <param name="value">The value to insert</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.UpdateOneAsync(System.String,System.String,System.Object,System.String,System.Object,System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts one data item as an asynchronous operation, without needing database script 
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="idColumnName">The identifier column name</param>
            <param name="idValue">The identifier value name</param>
            <param name="valueColumnName">The value column name</param>
            <param name="value">The value to insert</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.UpdateManyAsync(System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Update multiple data items in the specified tables and columns as an asynchronous operation, without needing datbase script
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="idColumnName">The identifier column</param>
            <param name="idValue">The identifier value</param>
            <param name="data">The data dictionary, string = ColumnName, object = value</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
            <exception cref="T:System.Exception">You must provide a non-null, non-empty dictionary to UpdateManyAsync</exception>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.UpdateManyAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Update multiple data items in the specified tables and columns as an asynchronous operation, without needing datbase script
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="whereParams">The where parameter dictionary, string = ColumnName, object = value</param>
            <param name="data">The data dictionary, string = ColumnName, object = value</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
            <exception cref="T:System.Exception">You must provide a non-null, non-empty dictionary to UpdateManyAsync</exception>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.InsertManyAsync(System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts multiple data items into the specified tables and columns as an asynchronous operation, without needing database script
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="idColumnName">The identifier column</param>
            <param name="idValue">The identifier value</param>
            <param name="data">The data dictionary, string = ColumnName, object = value</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
            <exception cref="T:System.Exception">You must provide a non-null, non-empty dictionary to InsertManyAsync</exception>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.InsertManyAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts multiple data items into the specified tables and columns as an asynchronous operation, without needing datbase script
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="data">The data dictionary, string = ColumnName, object = value</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
            <exception cref="T:System.Exception">You must provide a non-null, non-empty dictionary to InsertManyAsync</exception>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.InsertMany(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32,Microsoft.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts multiple data items into the specified tables and columns without needing database script
            </summary>
            <param name="tableViewName">Name of the table or view</param>
            <param name="data">The data dictionary, string = ColumnName, object = value</param>
            <param name="timeout">The timeout</param>
            <param name="transaction">Optional transaction</param>
            <exception cref="T:System.Exception">You must provide a non-null, non-empty dictionary to InsertMany</exception>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.BulkInsertAsync(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},Microsoft.Data.SqlClient.SqlTransaction,System.Int32)">
             <summary>
             Execute a bulk insert, using SqlBulkCopy,  as an asynchronous operation.
             </summary>
             <param name="tableName">Name of the table</param>
            <param name="data">The data dictionary, string = ColumnName, object = value</param>
             <param name="transaction">The SQL transaction.</param>
             <param name="timeout">The timeout.</param>
             <exception cref="T:System.Exception">
             DbConnection.GetDataTableSchemaFromTable could not load the schema for {tableViewName} during a call to BulkInsertAsync
             or
             </exception>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.GetGlobalTimeOut(System.Int32)">
            <summary>
            Gets the time out applicable global timeout.
            </summary>
            <param name="timeout">The suggested timeout</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.CanConnect(System.String,System.Int32,System.Boolean)">
            <summary>
            Determines whether this instance can connect the server using the specified connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="timeout">The timeout.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns><c>true</c> if this instance can connect the specified connection string; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnection.CanConnectAsync(System.String,System.Int32,System.Boolean)">
            <summary>
            Determines whether this instance can connect the server using the specified connection string, as an asynchronous operation
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="timeout">The timeout.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager">
            <summary>
            Data Connection String Manager.
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager.ConnectionStringLoader">
            <summary>
            Gets or sets the connection string loader function, for returning the correct connection string
            </summary>
            <value>The connection string loader.</value>
            <example>
            <code>
            DataConnectionStringManager.Instance.ConnectionStringLoader = (name) =>
            {
                return ConfigurationManager.ConnectionStrings[name].ConnectionString;
            };
            </code>
            </example>
        </member>
        <member name="F:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager._instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="F:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager._overrides">
            <summary>
            The overriden connection strings
            </summary>
        </member>
        <member name="P:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager.ConnectionStrings">
            <summary>
            Gets or sets the connection strings.
            </summary>
            <value>The registered connection strings</value>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager.GetConnectionString(System.String)">
            <summary>
            Gets the connection string.
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager.SetConnectionString(System.String,System.String)">
            <summary>
            Add or Update a connection string
            </summary>
            <param name="key">The connection string key</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager.AddOverride(System.String,System.String)">
            <summary>
            Adds an override for the connection string for the specified key
            </summary>
            <param name="key">The connection string key</param>
            <param name="overrideValue">The new connection string</param>
        </member>
        <member name="M:Microsoft.Data.SqlClient.Helpers.DataConnectionStringManager.ConnectionString(System.String)">
            <summary>
            Get the connection string for the specified key.  Will call the ConnectionStringLoader first, then check for overrides and then any registered connections strings in ConnectionStrings
            </summary>
            <param name="key">The connection string key</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Connection string could not be found</exception>
        </member>
    </members>
</doc>
